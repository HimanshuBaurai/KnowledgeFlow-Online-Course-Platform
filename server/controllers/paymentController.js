import ErrorHandler from "../utils/errorHandler.js";
import { catchAsyncError } from "../middlewares/catchAsyncError.js";
import { User } from "../models/User.js";
import { instance } from "../server.js";
import crypto from "crypto";
import { Payment } from "../models/Payment.js";

export const buySubscription = catchAsyncError(async (req, res, next) => {
    const user = await User.findById(req.user._id);
    if (!user) {
        return next(new ErrorHandler("User not found", 404));
    }
    if (user.role === "admin") {
        return next(new ErrorHandler("Admin cannot buy subscription", 400));
    }


    const plan_id = process.env.PLAN_ID || "plan_NGSAODA4JrczxW";

    const subscription = await instance.subscriptions.create({
        plan_id,//plan id
        total_count: 12,//billed every month for 12 months 
        customer_notify: 1,//send email to customer
    });

    user.subscription.id = subscription.id;
    user.subscription.status = subscription.status;
    await user.save({ validateBeforeSave: false }); //validateBeforeSave is set to false because we are not validating the user before saving

    res.status(200).json({
        success: true,
        subscriptionId: subscription.id,
    });
});

export const paymentVerification = catchAsyncError(async (req, res, next) => {
    const { razorpay_payment_id, razorpay_subscription_id, razorpay_signature } = req.body;

    const user = await User.findById(req.user._id);
    if (!user) { return next(new ErrorHandler("User not found", 404)); }
    if (user.role === "admin") { return next(new ErrorHandler("Admin cannot buy subscription", 400)); }

    const subscription_id = user.subscription.id;//razorpay subscription id is stored in the database


    const generated_signature = crypto.createHmac("sha256", process.env.RAZORPAY_API_SECRET).update(razorpay_payment_id + "|" + subscription_id, "utf-8").digest("hex");//generating signature using razorpay api secret

    const isAuthentic = generated_signature === razorpay_signature; //returns true or false
    if (!isAuthentic) {
        return res.redirect(`${process.env.FRONTEND_URL}/paymentfail`);
    }

    await Payment.create({
        razorpay_signature,  //signature generated by razorpay
        razorpay_payment_id,//payment id generated by razorpay
        razorpay_subscription_id,//subscription id generated by razorpay
    });
    user.subscription.status = "active";
    await user.save({ validateBeforeSave: false }); //validateBeforeSave is set to false because we are not validating the user before saving

    res.redirect(`${process.env.FRONTEND_URL}/paymentsuccess?reference=${razorpay_payment_id}`);
});

export const getRazorPayKey = catchAsyncError(async (req, res, next) => {
    res.status(200).json({
        success: true,
        key: process.env.RAZORPAY_API_KEY,
    });
});

export const cancelSubscription = catchAsyncError(async (req, res, next) => {
    const user = await User.findById(req.user._id);
    const subscriptionId = user.subscription.id;

    let refund = false;
    await instance.subscriptions.cancel(subscriptionId);

    const payment = await Payment.findOne({ razorpay_subscription_id: subscriptionId });

    const gap = Date.now() - payment.createdAt;
    const refundTime = process.env.REFUND_DAYS * 24 * 60 * 60 * 1000;//refund time in milliseconds
    if (refundTime > gap) {
        await instance.payments.refund(payment.razorpay_payment_id);
        refund = true;
    }

    await payment.deleteOne();//delete payment from database

    user.subscription.id = undefined;
    user.subscription.status = undefined;
    await user.save({ validateBeforeSave: false }); //validateBeforeSave is set to false because we are not validating the user before saving

    res.status(200).json({
        success: true,
        message:
            refund ? "Subscription cancelled successfully, You will recieve full refund within 7 days"
                : "Subscription cancelled successfully, You will not recieve any refund, as the refund time has expired",
    });
});

